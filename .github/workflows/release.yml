name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run build-win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.zip

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Linux
        run: npm run build-linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            dist/*.AppImage
            dist/*.zip
            dist/emulatorjs-netplay-server

  build-docker:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Docker image
        run: npm run build-docker

      - name: Get version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")
      
      - name: Publish Docker image to GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ steps.get_version.outputs.version }}
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ steps.get_version.outputs.version }}
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: docker-compose.yml

  create-release:
    needs: [build-windows, build-linux, build-docker]
    runs-on: ubuntu-latest
      
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")
      
      - name: Create and publish release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
          path: dist/

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-artifacts
          path: dist/

      - name: Download docker artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: dist/

      - name: Upload release assets
        uses: actions/upload-artifact@v2
        with:
          name: release-assets
          path: dist/

      - name: Rename Files
        run: |
          mv "dist/emulatorjs-netplay-server" "dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}"
          mv "dist/emulatorjs-netplay-server-${{ steps.get_version.outputs.version }}.zip" "dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}.zip"
          mv "dist/EmulatorJS Netplay Server-${{ steps.get_version.outputs.version }}.AppImage" "dist/EmulatorJS Netplay Server App-linux-${{ steps.get_version.outputs.version }}.AppImage"
          mv "dist/EmulatorJS Netplay Server ${{ steps.get_version.outputs.version }}.exe" "dist/EmulatorJS Netplay Server App-windows-${{ steps.get_version.outputs.version }}.exe"
          mv "dist/EmulatorJS Netplay Server-${{ steps.get_version.outputs.version }}-win.zip" "dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.zip"
          mv "dist/emulatorjs-netplay-server.exe" "dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.exe"

      - name: Update latest release
        uses: actions/github-script@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { Octokit } = require("@octokit/rest");

            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN,
            });

            const { owner, repo } = github.context.repo;
            const latestRelease = await octokit.repos.getLatestRelease({
              owner,
              repo,
            });

            await octokit.repos.updateRelease({
              owner,
              repo,
              release_id: latestRelease.data.id,
              tag_name: latestRelease.data.tag_name,
              name: latestRelease.data.name,
              body: latestRelease.data.body,
              prerelease: latestRelease.data.prerelease,
              target_commitish: latestRelease.data.target_commitish,
              draft: latestRelease.data.draft,
            });
