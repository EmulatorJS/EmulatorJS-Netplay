name: Release Workflow

on:
  push:
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: version
        run: echo "::set-output name=current_version::$(node -p "require('./package.json').version")"
      
      - name: Get previous version
        id: previous_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::set-output name=previous_version::$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/contents/package.json" | jq -r '.content' | base64 -d | jq -r '.version')"
      
      - name: Compare versions
        id: compare_versions
        run: |
          current_version="${{ steps.version.outputs.current_version }}"
          previous_version="${{ steps.previous_version.outputs.previous_version }}"
          
          if [[ "${current_version}" != "${previous_version}" ]]; then
            echo "Version has changed!"
            echo "::set-output name=version_changed::true"
          else
            echo "Version has not changed."
            echo "::set-output name=version_changed::false"
          fi

      - name: Purge artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0

  build-windows:
    needs: [check-version]
    runs-on: windows-latest
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run build-win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.zip

  build-linux:
    needs: [check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Linux
        run: npm run build-linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            dist/*.AppImage
            dist/*.zip
            dist/emulatorjs-netplay-server

  build-docker:
    needs: [check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Docker image
        run: npm run build-docker

      - name: Get version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")
      
      - name: Publish Docker image to GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ steps.get_version.outputs.version }}
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ steps.get_version.outputs.version }}
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: docker-compose.yml

  create-release:
    needs: [build-windows, build-linux, build-docker, check-version]
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Get version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")

      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
          path: dist/

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-artifacts
          path: dist/

      - name: Download docker artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: dist/

      - name: Rename Files
        run: |
          mv "dist/emulatorjs-netplay-server" "dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}"
          mv "dist/emulatorjs-netplay-server-${{ steps.get_version.outputs.version }}.zip" "dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}.zip"
          mv "dist/EmulatorJS Netplay Server-${{ steps.get_version.outputs.version }}.AppImage" "dist/EmulatorJS Netplay Server App-linux-${{ steps.get_version.outputs.version }}.AppImage"
          mv "dist/EmulatorJS Netplay Server ${{ steps.get_version.outputs.version }}.exe" "dist/EmulatorJS Netplay Server App-windows-${{ steps.get_version.outputs.version }}.exe"
          mv "dist/EmulatorJS Netplay Server-${{ steps.get_version.outputs.version }}-win.zip" "dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.zip"
          mv "dist/emulatorjs-netplay-server.exe" "dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.exe"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset Docker
        id: upload-release-asset-docker
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/docker-compose.yml
          asset_name: docker-compose.yml
          asset_content_type: application/yml
      
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}
          asset_name: EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Linux Zip
        id: upload-release-asset-linux-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}.zip
          asset_name: EmulatorJS Netplay Server-linux-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Linux AppImage
        id: upload-release-asset-linux-appimage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server App-linux-${{ steps.get_version.outputs.version }}.AppImage
          asset_name: EmulatorJS Netplay Server App-linux-${{ steps.get_version.outputs.version }}.AppImage
          asset_content_type: application/appimage

      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.exe
          asset_name: EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/exe

      - name: Upload Release Asset Windows Zip
        id: upload-release-asset-windows-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.zip
          asset_name: EmulatorJS Netplay Server-windows-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Windows App
        id: upload-release-asset-windows-app
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/EmulatorJS Netplay Server App-windows-${{ steps.get_version.outputs.version }}.exe
          asset_name: EmulatorJS Netplay Server App-windows-${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/exe

      - name: Purge artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0