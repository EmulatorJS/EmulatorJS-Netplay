name: Release Workflow

on:
  push:
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.version_changed.outputs.version_changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: git fetch --all --tags

      - name: Get current version
        id: version
        run: |
          version=$(node -p "require('./package.json').version")
          echo version=${version} >> $GITHUB_OUTPUT

      - name: Get Previous tag
        id: previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.1
          prefix: v

      - name: Compare versions
        id: version_changed
        run: |
          version=$(node -p "require('./package.json').version")
          current_version=v${version}
          previous_version="${{ steps.previous_tag.outputs.tag }}"
          
          if [[ "${current_version}" != "${previous_version}" ]]; then
            echo "Version has changed!"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version has not changed."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Purge artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0

  build-windows:
    needs: [check-version]
    runs-on: windows-latest
    if: ${{ needs.check-version.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run build-win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.zip

  build-linux:
    needs: [check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm ci

      - name: Build Linux
        run: npm run build-linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            dist/*.AppImage
            dist/*.zip

  build-docker:
    needs: [check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Docker image
        run: npm run build-docker

      - name: Publish Docker image to GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ needs.check-version.outputs.version }}
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:${{ needs.check-version.outputs.version }}
          docker tag emulatorjs-netplay-server ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest
          docker push ghcr.io/emulatorjs/emulatorjs-netplay/emulatorjs-netplay-server:latest

  create-release:
    needs: [build-windows, build-linux, build-docker, check-version]
    if: ${{ needs.check-version.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      
      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
          path: dist/

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-artifacts
          path: dist/

      - name: Rename Files
        run: |
          mv "dist/emulatorjs-netplay-server-${{ needs.check-version.outputs.version }}.zip" "dist/EmulatorJS Netplay Server-linux-${{ needs.check-version.outputs.version }}.zip"
          mv "dist/EmulatorJS Netplay Server-${{ needs.check-version.outputs.version }}.AppImage" "dist/EmulatorJS Netplay Server App-linux-${{ needs.check-version.outputs.version }}.AppImage"
          mv "dist/EmulatorJS Netplay Server ${{ needs.check-version.outputs.version }}.exe" "dist/EmulatorJS Netplay Server App-windows-${{ needs.check-version.outputs.version }}.exe"
          mv "dist/EmulatorJS Netplay Server-${{ needs.check-version.outputs.version }}-win.zip" "dist/EmulatorJS Netplay Server-windows-${{ needs.check-version.outputs.version }}.zip"
      
      - name: Generate checksum
        uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            dist/*.zip
            dist/*.exe
            dist/*.AppImage

      - name: Create Release & Make Notes & Upload Assets
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.check-version.outputs.version }}" --title "v${{ needs.check-version.outputs.version }}" --generate-notes
          gh release upload "v${{ needs.check-version.outputs.version }}" "dist/EmulatorJS Netplay Server-linux-${{ needs.check-version.outputs.version }}.zip#EmulatorJS Netplay Server-linux-${{ needs.check-version.outputs.version }}.zip"
          gh release upload "v${{ needs.check-version.outputs.version }}" "dist/EmulatorJS Netplay Server App-linux-${{ needs.check-version.outputs.version }}.AppImage#EmulatorJS Netplay Server App-linux-${{ needs.check-version.outputs.version }}.AppImage"
          gh release upload "v${{ needs.check-version.outputs.version }}" "dist/EmulatorJS Netplay Server-windows-${{ needs.check-version.outputs.version }}.zip#EmulatorJS Netplay Server-windows-${{ needs.check-version.outputs.version }}.zip"
          gh release upload "v${{ needs.check-version.outputs.version }}" "dist/EmulatorJS Netplay Server App-windows-${{ needs.check-version.outputs.version }}.exe#EmulatorJS Netplay Server App-windows-${{ needs.check-version.outputs.version }}.exe"
          gh release upload "v${{ needs.check-version.outputs.version }}" "checksum.txt#checksum-256.txt"

      - name: Purge artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0